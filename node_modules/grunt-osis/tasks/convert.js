/*
 * grunt-osis
 * https://github.com/matt-cook/grunt-osis
 *
 * Copyright (c) 2016 Matt Cook
 * Licensed under the MIT license.
 */
'use strict';

 module.exports = function(grunt) {

  var plist = require('plist');
  var YAML = require('yamljs');
  var path = require('path');
  var util = require('util');
  var csv = require('csv');
  var fs = require('fs');
  var async = require('async');

  grunt.file.defaultEncoding = "utf8";

  grunt.registerMultiTask('convert', 'Convert from OSIS to Markdown', function() {

    //Tell grunt that this is an async task
    var done = this.async();

    var options = this.options({
      pretty: true,
      mergeAttrs: true,
      inline: 8,
      indent: 2
    });

    if (options.type && options.type.indexOf('.') === -1) {
      options.type = '.' + options.type;
    }

    grunt.verbose.writeflags(options, 'Options');

    //get book meta info
    var parseXML = require('node-xml-lite').parseString;
    var bookXML = parseXML(grunt.file.read('./data/books.xml'));
    var book = {};
    for(var i = 0; i < bookXML.childs.length; i++){
      var b = bookXML.childs[i].childs;
      if(b) {
        var id = b[1].childs[0];
        var title = b[3].childs[0];
        book[id] = title;
      }
    }

    //get lanuage meta info
    var langSrc = grunt.file.read('./data/ISO-639-2_utf-8.txt').split('\n');
    var languageData = header('../','/language','Language','select-language',null);
    languageData += '<ul>';
    var language = {};
    for(var i = 0; i < langSrc.length; i++){
      var l = langSrc[i].split('|');
      if(l.length == 5 && l[2]){
        var languageTitle = l[3].indexOf(';') ? l[3].split(';')[0] : l[3];
        var languageID = l[2];
        var languageURL= '/'+languageID;
        var languageBreadcrumb = '<a href="/language">Language</a>'
        language[languageID] = {};
        language[languageID].title = languageTitle;
        language[languageID].data = header('../',languageURL,clean(languageTitle),'language',languageBreadcrumb);
        language[languageID].data += '<ul>';
      }
    }

    async.forEach(this.files, function (f, next) {

      var handled = false;
      var finish = function() {
        if(!handled) {
          // Write the destination file.
          grunt.file.write(f.dest, data);
          next();
        }
      };

      if (f.src.length < 1) {
        // No src files, issued warn and goto next target.
        grunt.log.warn('Destination not written because no source files were found.');
        next();
        return;
      }

      var destFolder = ''
      var srcFiles = f.src.map(grunt.file.read).join(grunt.util.normalizelf(grunt.util.linefeed)),
          srcExt = options.type ||path.extname(f.src[0]),
          destExt = path.extname(f.dest),
          data = srcFiles;

      // source/destination same, goto next target.
      if (srcExt === destExt) {
        next();
        return;
      }

    if (srcExt === '.xml') {

        handled = true;
        var parse = require('xml2js').parseString;
        parse(srcFiles, options, function(err, result) {
          if (err) {
            grunt.fail.warn('File ' + f.dest.cyan + ' parsing errors: ' + err);
          }
          if (destExt === '.html') {
            var biblePath = f.dest.substring(0,f.dest.lastIndexOf(destExt));
            var b = result.osis.osisText.div; //books
            var bh = result.osis.osisText.header.work; //bible header info
            var bibleTitle = bh.title;
            var bibleURL = '/'+biblePath.replace('data/bibles/gh-pages/','');
            var bp = bibleURL.split('/');
            var languageID = bp[1];
            var languagePath = 'data/bibles/gh-pages/'+languageID;
            var languageURL =  '/'+languageID;
            var bibleID = bp[2];
            var biblePath = languagePath + '/' + bibleID;
            var bibleURL = languageURL + '/' + bibleID;
            var languageTitle = language[languageID].title;
            var languageBreadcrumb = '<a href="/language">Language</a>'
            var bibleBreadcrumb = languageBreadcrumb + ' &gt; <a href="'+languageURL+'">'+languageTitle+'</a>';
            var bibleData = header('../../',bibleURL,clean(bibleTitle),'bible',bibleBreadcrumb);
            var creator = bh.creator ? bh.creator.toString().replace(",[object Object]",'') : null;
            if(bh.description) bibleData += '<p>'+bh.description.replace('\n','').trim()+'</p>';
            bibleData += '<p><ul>';

            language[languageID].data += '<li><a href="'+bibleURL+'">'+bibleTitle+'</a></li>';
            language[languageID].hasTranslation = true;

            var bibleBooks = [];

            for(var i = 0; i < b.length; i++){
              var c = b[i].chapter;
              var bookID = b[i].osisID.toLowerCase();
              var bookPath = biblePath + '/' + bookID;
              var bookURL = bibleURL + '/' + bookID;
              var bookTitle = book[b[i].osisID];
              var bookBreadcrumb = bibleBreadcrumb + ' &gt; <a href="'+bibleURL+'">'+bibleTitle+'</a>'
              var bookData = header('../../../',bookURL,clean(bookTitle),'book',bookBreadcrumb);
              bookData += '<p><ul>'
              bibleBooks[b[i].osisID] = '<li><a href="'+bookURL+'">'+bookTitle+'</a></li>';
              for(var j = 0; j < c.length; j++){
                var body = '';
                var v = c[j].verse;
                for(var k = 0; k < v.length; k++){
                  if(v[k]['_']){
                    body += '<span class="verse"><a name="'+(k+1)+'">'+(k+1)+'</a>'
                      +v[k]['_'].replace('\n','').trim();
                  }else if(v[k].note){
                     console.error('empty verse (note)',v[k]);
                     body +=  '<span class="verse note empty"><a name="'+(k+1)+'">'+(k+1)+'</a>'
                      +v[k].note.replace('\n','').trim();
                   }else{
                     console.error('empty verse',v[k]);
                     body += '<span class="verse empty"><a name="'+(k+1)+'">'+(k+1)+'</a>';
                   }
                   body += '</span> ';
                }
                //write individual chapters
                var chapterNum = j + 1;
                var chapterTitle = 'Chapter '+chapterNum;
                var chapterURL = bookURL + '/' + chapterNum;
                bookData += '<li><a href="'+chapterURL+'">'+chapterTitle+'</a></li>';
                var chapterPath = bookPath + '/' + chapterNum;
                var chapterBreadcrumb = bookBreadcrumb + ' &gt; <a href="'+bookURL+'">'+bookTitle+'</a>'
                var chapterData = header('../../../../',chapterURL,clean(chapterTitle),'chapter',chapterBreadcrumb);
                chapterData += '<p>'+body+'</p>';
                chapterData += footer();
                grunt.file.write(chapterPath+'/index.html', chapterData);
              }
              bookData += '</ul></p>';
              bookData += footer();
              grunt.file.write(bookPath+'/index.html',bookData);
            }
            for(var b in book){
              if(bibleBooks[b]){
                 bibleData += bibleBooks[b];
              }
            }
            bibleData += '</ul></p>';
            if(bh.contributor || creator || bh.publisher || bh.rights || bh.scope){
              bibleData += '<p class="details">';
              if(bh.contributor) bibleData += '<strong>Contributor:</strong> '+bh.contributor+'<br>';
              if(creator) bibleData += '<strong>Creator:</strong> '+creator+'<br>';
              if(bh.publisher) bibleData += '<strong>Publisher:</strong> '+bh.publisher+'<br>';
              if(bh.rights) bibleData += '<strong>Rights:</strong> '+bh.rights+'<br>';
              if(bh.scope) bibleData += '<strong>Scope:</strong>: '+bh.scope+'<br>';
              bibleData += '</p>';
            }
            bibleData += footer();
            grunt.file.write( biblePath+'/index.html', bibleData);
            if(language[languageID].hasTranslation){
              if(!language[languageID].used){
                language[languageID].used = true;
                languageData += '<li><a href="/'+languageID+'">'+language[languageID].title+'</a></li>';
              }
              grunt.file.write('data/bibles/gh-pages/' + languageID + '/index.html', language[languageID].data+'</ul>'+footer());
            }
            grunt.file.write( 'data/bibles/gh-pages/language/index.html', languageData+'</ul>'+footer());
            finish();
            next();
          }else{
            data = JSON.stringify(result, null, options.indent);
            grunt.file.write(f.dest, data);
            finish();
            next();
          }
        });

      }

      finish();
      // Print a success message.
      grunt.log.ok('File ' + f.dest.cyan + ' converted.' + ' OK'.green);
    }, done);
  });

};

function clean(s) {
    if(!s) return null;
    var x = replaceAll(s,':','&#59;');
    x = replaceAll(x,'\n','');
    return x.trim();
}

function replaceAll(s,search,replacement){
  return s.replace(new RegExp(search, 'g'), replacement)
}

var basepath  = "https://code.lookitscook.com/bible";
function header(rootpath,url,title,type,breadcrumb){
  var h = '<!DOCTYPE html>'
  + '<html>'
  + '<head>'
    + '<meta charset="utf-8">'
    + '<meta http-equiv="X-UA-Compatible" content="IE=edge">'
    + '<meta name="viewport" content="width=device-width,initial-scale=1">'
    + '<title>'+title+'</title>'
    + '<meta name="description" content="">'
    + '<link rel="stylesheet" href="'+rootpath+'css/main.css">'
    + '<link rel="canonical" href="'+basepath+url+'">'
    + '<link rel="icon" type="image/png" href="'+rootpath+'img/favicon.png">'
  + '</head>'
  + '<body class="'+type+'">'
    + '<div class="container">'
      + '<div class="row">'
        + '<div id="content" class="column">'
          + '<div id="breadcrumb">';
          if(breadcrumb) h+= breadcrumb+' &gt ';
          h+= '<strong>'+title+'</strong></div>';
  return h;
}

function footer(){
  return'</div</div></div></body></html>';
}
