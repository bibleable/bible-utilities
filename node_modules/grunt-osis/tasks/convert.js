/*
 * grunt-osis
 * https://github.com/matt-cook/grunt-osis
 *
 * Copyright (c) 2016 Matt Cook
 * Licensed under the MIT license.
 */
'use strict';

 module.exports = function(grunt) {

  var plist = require('plist');
  var YAML = require('yamljs');
  var path = require('path');
  var util = require('util');
  var csv = require('csv');
  var fs = require('fs');
  var async = require('async');

  grunt.registerMultiTask('convert', 'Convert from OSIS to Markdown', function() {

    //Tell grunt that this is an async task
    var done = this.async();

    var options = this.options({
      pretty: true,
      mergeAttrs: true,
      inline: 8,
      indent: 2
    });

    if (options.type && options.type.indexOf('.') === -1) {
      options.type = '.' + options.type;
    }

    grunt.verbose.writeflags(options, 'Options');

    //get book meta info
    var parseXML = require('node-xml-lite').parseString;
    var bookXML = parseXML(grunt.file.read('./data/books.xml'));
    var book = {};
    for(var i = 0; i < bookXML.childs.length; i++){
      var b = bookXML.childs[i].childs;
      if(b) {
        var id = b[1].childs[0];
        var title = b[3].childs[0];
        book[id] = title;
      }
    }

    //get lanuage meta info
    var langData = grunt.file.read('./data/ISO-639-2_utf-8.txt').split('\n');
    var language = {};
    for(var i = 0; i < langData.length; i++){
      var l = langData[i].split('|');
      if(l.length == 5 && l[2]){
        var languageTitle = l[3];
        var languageID = l[2];
        language[languageID] = {};
        language[languageID].title = languageTitle;
        language[languageID].data = '---\n'
          + 'title: '+languageTitle+'\n'
          + 'language: '+languageID+'\n'
          + 'permalink: /'+ languageID + '\n'
          + '---\n'
          + '## [The Bible](/language)\n'
          + '### '+languageTitle+'\n';
      }
    }

    async.forEach(this.files, function (f, next) {

      var handled = false;
      var finish = function() {
        if(!handled) {
          // Write the destination file.
          grunt.file.write(f.dest, data);
          next();
        }
      };

      if (f.src.length < 1) {
        // No src files, issued warn and goto next target.
        grunt.log.warn('Destination not written because no source files were found.');
        next();
        return;
      }

      var srcFiles = f.src.map(grunt.file.read).join(grunt.util.normalizelf(grunt.util.linefeed)),
          srcExt = options.type ||path.extname(f.src[0]),
          destExt = path.extname(f.dest),
          data = srcFiles;

      // source/destination same, goto next target.
      if (srcExt === destExt) {
        next();
        return;
      }

    if (srcExt === '.xml') {

        handled = true;
        var parse = require('xml2js').parseString;
        parse(srcFiles, options, function(err, result) {
          if (err) {
            grunt.fail.warn('File ' + f.dest.cyan + ' parsing errors: ' + err);
          }
          if (destExt === '.md') {
            var biblePath = f.dest.substring(0,f.dest.lastIndexOf(destExt));
            var b = result.osis.osisText.div; //books
            var bh = result.osis.osisText.header.work; //bible header info
            var bibleTitle = bh.title;
            var bibleURL = '/'+biblePath.replace('data/bibles/gh-pages/','');
            var bp = bibleURL.split('/');
            var languageID = bp[1];
            var languageTitle = language[languageID].title;
            var bibleData = '---\n'
              + 'title: '+bibleTitle+'\n'
              + 'language: '+languageID+'\n'
              + 'permalink: '+bibleURL+ '\n'
              + '---\n'
              + '## ['+languageTitle+'](/'+languageID+')\n'
              + '### '+bibleTitle+'\n';
            if(bh.description) bibleData += '\n'+bh.description.replace('\n','').trim()+'\n';
            if(bh.contributor) bibleData += '\n**Contributor:** '+bh.contributor;
            if(bh.creator) bibleData += '\n**Creator:** '+bh.creator;
            if(bh.publisher) bibleData += '\n**Publisher:** '+bh.publisher;
            if(bh.source) bibleData += '\n**Source:** '+bh.source;
            if(bh.coverage) bibleData += '\n**Coverage:** '+bh.coverage;
            if(bh.rights) bibleData += '\n**Rights:** '+bh.rights;
            if(bh.scope) bibleData += '\n**Scope:** '+bh.scope;
            bibleData += '\n';

            language[languageID].data += '\n- ['+bibleTitle+']('+bibleURL+')';
            language[languageID].hasTranslation = true;
            var bibleID = bp[2];
            var bibleBooks = [];

            for(var i = 0; i < b.length; i++){
              var c = b[i].chapter;
              var bookID = b[i].osisID.toLowerCase();
              var bookPath = biblePath + '/' + bookID;
              var bookURL = bibleURL + '/' + bookID;
              var bookTitle = book[b[i].osisID];
              var bookData = '---\n'
                + 'title: '+bookTitle+'\n'
                + 'book: '+bookID+'\n'
                + 'language: '+languageID+'\n'
                + 'bible: '+bibleID+'\n'
                + 'permalink: '+ bookURL + '\n'
                + '---\n'
                + '## ('+bibleTitle+')['+bibleURL+']\n\n'
                + '### '+bookTitle+'\n';
              bibleBooks[b[i].osisID] = '\n- ['+bookTitle+']('+bookURL+')';
              for(var j = 0; j < c.length; j++){
                var body = '';
                var v = c[j].verse;
                for(var k = 0; k < v.length; k++){
                  if(v[k]['_']){
                    body += '\n'
                      + '<span class="verse"><a name="'+(k+1)+'">'+(k+1)+'</a>'
                      +v[k]['_'].replace('\n','').trim();
                  }else if(v[k].note){
                     console.error('empty verse (note)',v[k]);
                     body += '\n'
                      + '<span class="verse note empty"><a name="'+(k+1)+'">'+(k+1)+'</a>'
                      +v[k].note.replace('\n','').trim();
                   }else{
                     console.error('empty verse',v[k]);
                     body += '\n<span class="verse empty"><a name="'+(k+1)+'">'+(k+1)+'</a>';
                   }
                   body += '</span>';
                }
                //write individual chapters
                var chapterNum = j + 1;
                var chapterTitle = 'Chapter '+chapterNum;
                var chapterURL = bookURL + '/' + chapterNum;
                bookData += '\n- ['+chapterTitle+']('+chapterURL+')';
                var chapterData = '---\n'
                  + 'title: '+bookTitle+' - '+chapterTitle+'\n'
                  + 'chapter: '+chapterNum+'\n'
                  + 'book: '+bookID+'\n'
                  + 'language: '+languageID+'\n'
                  + 'bible: '+bibleID+'\n'
                  + 'permalink: '+ chapterURL + '\n'
                  + '---\n'
                  + '## ['+bookTitle+']('+bookURL+')\n\n'
                  + '### Chapter '+chapterNum+'\n'
                  + body;
                var chapterPath = bookPath + '/' + chapterNum + destExt;
                grunt.file.write(chapterPath, chapterData);
              }
              grunt.file.write(bookPath + destExt, bookData);
            }
            for(var b in book){
              if(bibleBooks[b]){
                 bibleData += bibleBooks[b];
              }
            }
            grunt.file.write( biblePath + destExt, bibleData);
            if(language[languageID].hasTranslation)
              grunt.file.write('data/bibles/gh-pages/' + id + destExt, language[languageID].data);
            finish();
            next();
          }else{
            data = JSON.stringify(result, null, options.indent);
            grunt.file.write(f.dest, data);
            finish();
            next();
          }
        });

      }

      finish();
      // Print a success message.
      grunt.log.ok('File ' + f.dest.cyan + ' converted.' + ' OK'.green);
    }, done);
  });

};
